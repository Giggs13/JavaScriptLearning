////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(`
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Array.isArray(obj)
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++`);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(Array.isArray([])); // true
console.log(Array.isArray(new Array(7))); // true
console.log(Array.isArray({})); // false
console.log(Array.isArray('array')); // false

const arr = [1, 2, 3, 4, 5];
console.log(arr instanceof Array);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(`
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Array.join([separator])
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++`);
// Метод join() объединяет все элементы массива (или массивоподобного объекта) в строку.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const elements = ['Fire', 'Air', 'Water'];

console.log(elements.join()); // expected output: "Fire,Air,Water"
console.log(elements.join('')); // expected output: "FireAirWater"
console.log(elements.join('-')); // expected output: "Fire-Air-Water"

function f(a, b, c) {
    const s = Array.prototype.join.call(arguments);
    console.log(s); // '1,a,true'
}

f(1, 'a', true);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(`
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Array.reverse()
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++`);
// Метод reverse() на месте обращает порядок следования элементов массива. Первый элемент массива становится последним,
// а последний — первым.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const array1 = ['one', 'two', 'three'];
console.log('array1: ', array1); // expected output: Array ['one', 'two', 'three']

const reversed = array1.reverse();
console.log('reversed: ', reversed); // expected output: Array ['three', 'two', 'one']

/* Careful: reverse is destructive. It also changes the original array */
console.log('array1: ', array1); // expected output: Array ['three', 'two', 'one']

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(`
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
arr.sort([compareFunction])
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++`);
// Метод sort() на месте сортирует элементы массива и возвращает отсортированный массив. Сортировка не обязательно
// устойчива (англ.). Порядок cортировки по умолчанию соответствует порядку кодовых точек Unicode.
// В Unicode, числа находятся перед буквами в верхнем регистре, а те, в свою очередь, перед буквами в нижнем регистре.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const fruit = ['арбузы', 'бананы', 'Вишня'];
console.log(fruit.sort()); // ['Вишня', 'арбузы', 'бананы']

const scores = [1, 2, 20, 10, 21, 80, 9];
scores.sort();
console.log(scores); // [ 1, 10, 2, 20, 21, 80, 9 ]
scores.sort((a, b) => a - b);
console.log(scores); // [ 1, 2, 9, 10, 20, 21, 80 ]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(`
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
var new_array = old_array.concat(value1[, value2[, ...[, valueN]]])
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++`);
// Метод concat() возвращает новый массив, состоящий из массива, на котором он был вызван, соединённого с другими
// массивами и/или значениями, переданными в качестве аргументов.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const concat1 = ['a', 'b', 'c'];
const concat2 = ['d', 'e', 'f'];
console.log(concat1.concat(concat2)); // expected output: Array [ 'a', 'b', 'c', 'd', 'e', 'f' ]
console.log(concat1.concat(concat2, concat1, 'a', 4)); // expected output: Array [ 'a', 'b', 'c', 'd', 'e', 'f', 'a', 'b', 'c', 'a', 4 ]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(`
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
arr.slice([begin[, end]])
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++`);
// Метод slice() возвращает новый массив, содержащий копию части исходного массива.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const animals = ['ant', 'bison', 'camel', 'duck', 'elephant'];
console.log(animals.slice(2)); // expected output: Array [ 'camel', 'duck', 'elephant' ]
console.log(animals.slice(-2)); // expected output: Array [ 'duck', 'elephant' ]
console.log(animals.slice(2, 4)); // expected output: Array [ 'camel', 'duck' ]
console.log(animals.slice(2, -2)); // expected output: Array [ 'camel' ]

function list() {
    return Array.prototype.slice.call(arguments, 1);
}

console.log(list(1, 2, 3)); // [ 1, 2, 3 ]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(`
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
array.splice(start, deleteCount[, item1[, item2[, ...]]])
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++`);
// Метод splice() изменяет содержимое массива, удаляя существующие элементы и/или добавляя новые.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const myFish = ['angel', 'clown', 'mandarin', 'sturgeon'];
const removed = myFish.splice(0, 1, 'drum');
console.log(myFish);
console.log(removed);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(`
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
arr.push(element1, ..., elementN)
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++`);
// Метод push() добавляет один или более элементов в конец массива и возвращает новую длину массива.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const sports = ['футбол', 'бейсбол'];
let total = sports.push('американский футбол', 'плавание');
console.log(sports); // ['футбол', 'бейсбол', 'американский футбол', 'плавание']
console.log(total);  // 4

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(`
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
arr.pop()
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++`);
// Метод pop() удаляет последний элемент из массива и возвращает его значение.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const popped = sports.pop();
console.log(popped);  // 'плавание'
console.log(sports.length);  // 3

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(`
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
arr.unshift([element1[, ...[, elementN]]])
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++`);
// Метод unshift() добавляет один или более элементов в начало массива и возвращает новую длину массива.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
total = sports.unshift('плавание');
console.log(sports);  // 'плавание'
console.log(total);  // 4

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(`
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
arr.shift()
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++`);
// Метод shift() удаляет первый элемент из массива и возвращает его значение. Этот метод изменяет длину массива.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const shifted = sports.shift();
console.log(shifted);  // 'плавание'
console.log(sports.length);  // 3

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(`
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
arr.forEach(function callback(currentValue, index, array) {
    //your iterator
}[, thisArg]);
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++`);
// Метод forEach() выполняет указанную функцию один раз для каждого элемента в массиве.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function logArrayElements(element, index, array) {
    console.log('a[' + index + '] = ' + element);
}

// Обратите внимание на пропуск по индексу 2, там нет элемента, поэтому он не посещается
[2, 5, , 9].forEach(logArrayElements);
// логи:
// a[0] = 2
// a[1] = 5
// a[3] = 9

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(`
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
var new_array = arr.map(function callback(currentValue, index, array) { 
    // Возвращает элемент для new_array 
}[, thisArg])
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++`);
// Метод map() создаёт новый массив с результатом вызова указанной функции для каждого элемента массива.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const numbers = [1, 4, 9];
const roots = numbers.map(Math.sqrt);
console.log(roots);
// теперь roots равен [1, 2, 3], а numbers всё ещё равен [1, 4, 9]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(`
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
var newArray = arr.filter(callback[, thisArg])

//var newArray = arr.filter(callback(element[, index[, array]])[, thisArg])
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++`);
// Метод filter() создаёт новый массив со всеми элементами, прошедшими проверку, задаваемую в передаваемой функции.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];
const result = words.filter(word => word.length > 6);
console.log(result);
// expected output: Array [ 'exuberant', 'destruction', 'present' ]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(`
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
arr.every(callback[, thisArg])
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++`);
// Метод every() проверяет, удовлетворяют ли все элементы массива условию, заданному в передаваемой функции.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(
    [12, 5, 8, 130, 44].every(elem => elem >= 10)); // false
console.log(
    [12, 54, 18, 130, 44].every(elem => elem >= 10)); // true

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(`
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
arr.some(callback[, thisArg])
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++`);
// Метод some() проверяет, удовлетворяет ли хоть какой-нибудь элемент массива условию, заданному в передаваемой функции.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(
    [2, 5, 8, 1, 4].some(elem => elem > 10)); // false
console.log(
    [12, 5, 8, 1, 4].some(elem => elem > 10)); // true

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(`
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
array.reduce(callback[, initialValue])
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++`);
// Метод reduce() применяет функцию к аккумулятору и каждому значению массива (слева-направо), сводя его к одному
// значению.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const reduced_arr = [1, 2, 3, 4];
const reducer = (accumulator, currentValue) => accumulator + currentValue;

// 1 + 2 + 3 + 4
console.log(reduced_arr.reduce(reducer));
// expected output: 10

// 0 + 1 + 2 + 3 + 4
console.log(reduced_arr.reduce(reducer, 0));
// expected output: 10

// 5 + 1 + 2 + 3 + 4
console.log(reduced_arr.reduce(reducer, 5));
// expected output: 15

const sum = [{x: 1, y: 1}, {x: 2, y: 2}, {x: 3, y: 3}].reduce(
    (accumulator, currentValue) => accumulator + currentValue.x,
    0
);
console.log(sum); // sum == 6

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(`
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
arr.reduceRight(callback[, initialValue])
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++`);
// Метод reduceRight() применяет функцию к аккумулятору и каждому значению массива (справа-налево), сводя его к одному
// значению.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const reduced_right_arr = [0, 1, 2, 3, 4].reduceRight(function (previousValue, currentValue, index, array) {
    return previousValue + currentValue;
});
console.log(reduced_right_arr);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(`
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
arr.indexOf(searchElement[, fromIndex = 0])
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++`);
// Метод indexOf() возвращает первый индекс, по которому данный элемент может быть найден в массиве или -1,
// если такого индекса нет.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const arrayIndexOf = [2, 5, 9];
console.log(arrayIndexOf.indexOf(2)); // 0
console.log(arrayIndexOf.indexOf(7)); // -1
console.log(arrayIndexOf.indexOf(9, 2)); // 2
console.log(arrayIndexOf.indexOf(2, -1)); // -1
console.log(arrayIndexOf.indexOf(2, -2)); // -1
console.log(arrayIndexOf.indexOf(2, -3)); // 0

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(`
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
arr.lastIndexOf(searchElement[, fromIndex = arr.length])
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++`);
// Метод lastIndexOf() возвращает последний индекс, по которому данный элемент может быть найден в массиве или -1,
// если такого индекса нет. Массив просматривается от конца к началу, начиная с индекса fromIndex.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const arrayLastIndexOf = [2, 5, 9, 2];
console.log(arrayLastIndexOf.lastIndexOf(2)); // 3
console.log(arrayLastIndexOf.lastIndexOf(7)); // -1
console.log(arrayLastIndexOf.lastIndexOf(2, 3)); // 3
console.log(arrayLastIndexOf.lastIndexOf(2, 2)); // 0
console.log(arrayLastIndexOf.lastIndexOf(2, -2)); // 0
console.log(arrayLastIndexOf.lastIndexOf(2, -1)); // 3

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(`
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Array.from(arrayLike[, mapFn[, thisArg]])
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++`);
// Метод Array.from() создаёт новый экземпляр Array из массивоподобного или итерируемого объекта.
//
// В ES2015 классовый синтаксис позволяет создавать подклассы как встроенных классов, так и классов, определённых
// пользователем; в результате статические методы класса, вроде Array.from «наследуются» подклассами Array и создают
// новые экземпляры подкласса, а не класса Array.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(Array.from('foo')); // ['f', 'o', 'o']

const set = new Set(['foo', 'window']);
console.log(Array.from(set)); // ['foo', 'window']

const map = new Map([[1, 2], [2, 4], [4, 8]]);
console.log(Array.from(map)); // [[1, 2], [2, 4], [4, 8]]

console.log(
    Array.from([1, 2, 3], x => x + x)); // [2, 4, 6]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(`
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Array.of(element0[, element1[, ...[, elementN]]])
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++`);
// Метод Array.of() создаёт новый экземпляр массива Array из произвольного числа аргументов, вне зависимости от числа
// или типа аргумента.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(
    Array.of(1, 2, 3)); // [1, 2, 3]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(`
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
arr.copyWithin(target, start[, end = this.length])
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++`);
// Метод copyWithin() копирует последовательность элементов массива внутри него в позицию, начинающуюся по индексу
// target. Копия берётся по индексам, задаваемым вторым и третьим аргументами start и end. Аргумент end является
// необязательным и по умолчанию равен длине массива.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(
    [1, 2, 3, 4, 5].copyWithin(0, 3)); // [4, 5, 3, 4, 5]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(`
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
arr.entries()
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++`);
// Метод entries() возвращает новый объект итератора массива Array Iterator, содержащий пары ключ / значение для
// каждого индекса в массиве.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const arrEntries = ['a', 'b', 'c'];
const entries = arrEntries.entries();

for (let entry of entries) {
    console.log(entry);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(`
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
arr.fill(value[, start = 0[, end = this.length]])
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++`);
// Метод fill() заполняет все элементы массива от начального до конечного индексов одним значением.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(
    [1, 2, 3].fill(4)); // [4, 4, 4]
console.log(
    [1, 2, 3].fill(4, 1)); // [1, 4, 4]
console.log(
    [1, 2, 3].fill(4, 1, 2)); // [1, 4, 3]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(`
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
arr.find(callback[, thisArg])
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++`);
// Метод find() возвращает значение первого найденного в массиве элемента, которое удовлетворяет условию переданному в
// callback функции.  В противном случае возвращается undefined.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function isPrime(element, index, array) {
    let start = 2;
    while (start <= Math.sqrt(element)) {
        if (element % start++ < 1) {
            return false;
        }
    }
    return element > 1;
}

console.log([4, 6, 8, 12].find(isPrime)); // undefined, не найдено
console.log([4, 5, 8, 12].find(isPrime)); // 5

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(`
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
arr.findIndex(callback[, thisArg])
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++`);
// Метод findIndex() возвращает индекс в массиве, если элемент удовлетворяет условию проверяющей функции.
// В противном случае возвращается -1.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function isPrime(element, index, array) {
    let start = 2;
    while (start <= Math.sqrt(element)) {
        if (element % start++ < 1) {
            return false;
        }
    }
    return element > 1;
}

console.log([4, 6, 8, 12].findIndex(isPrime)); // undefined, не найдено
console.log([4, 5, 8, 12].findIndex(isPrime)); // 5

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(`
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
var newArray = arr.flat(depth);
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++`);
// Метод flat() возвращает новый массив, в котором все элементы вложенных подмассивов были рекурсивно "подняты" на
// указанный уровень depth.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
let arrFlatted = [1, 2, [3, 4, [5, 6]]];
console.log(
    arrFlatted.flat(2)); // [ 1, 2, 3, 4, 5, 6 ]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(`
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
var new_array = arr.flatMap(function callback(currentValue[, index[, array]]) {
    // возращает элемент для new_array
}[, thisArg])   
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++`);
// Метод flatMap() сначала применяет функцию к каждому элементу, а затем преобразует полученый результат в плоскую
// структуру и помещает в новый массив. Это идентично map фукнции, с последующим применением функции flat с параметром
// depth ( глубина ) равным 1, но flatMap часто бывает полезным, так как работает немного более эффективно.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(
    [1, 2, 3, 4].flatMap(x => [x * 2])); // [ 2, 4, 6, 8 ]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(`
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
arr.includes(searchElement[, fromIndex = 0])  
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++`);
// Метод includes() определяет, содержит ли массив определённый элемент, возвращая в зависимости от этого true или
// false.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(
    [1, 2, 3, 4].includes(3, 1)); // true
console.log(
    [1, 2, 3, 4].includes(7)); // false

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(`
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
arr.keys()
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++`);
// Метод keys() возвращает новый итератор массива Array Iterator, содержащий ключи каждого индекса в массиве.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const arrKeys = ['a', 'b', 'c'];

console.log(...arrKeys.keys());
const iteratorKeys = arrKeys.keys();
console.log(iteratorKeys.next()); // { value: 0, done: false }
console.log(iteratorKeys.next()); // { value: 1, done: false }
console.log(iteratorKeys.next()); // { value: 2, done: false }
console.log(iteratorKeys.next()); // { value: undefined, done: true }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(`
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
arr.toString();
arr.toLocaleString();
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++`);
// Метод toString() возвращает строковое представление указанного массива и его элементов.
//
// Метод toLocaleString() возвращает строковое представление элементов массива. Элементы преобразуются в строки с
// использованием своих собственных методов toLocaleString и эти строки разделяются локале-зависимой строкой
// (например, запятой «,»).
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(
    [1337, new Date, 'foo'].toString()
);
console.log(
    [1337, new Date, 'foo'].toLocaleString()
);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
console.log(`
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
arr.values()
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++`);
// Метод values() возвращает новый объект итератора массива Array Iterator, содержащий значения для каждого индекса в
// массиве.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const arrValues = ['w', 'y', 'k', 'o', 'p'];

for (let letter of arrValues.values()) {
    console.log(letter);
}
console.log('--------- @@iterator -----------');
for (let letter of arrValues[Symbol.iterator]()) {
    console.log(letter);
}
